(module number_utils
   (export (number->uint64::uint64 val)
           (number->int64::int64 val)
           (number->uint32::uint32 val)
           (number->int32::int32 val)
           (number->uint16::uint16 val)
           (number->int16::int16 val)
           (number->uint8::uint8 val)
           (number->int8::int8 val)
           (number->flonum::real val)
           (number->llong::llong val)
           (number->elong::elong val)
           (number->fixnum::bint val)
           (number->bignum::bignum val)))

(define (number->bignum::bignum val)
   (unless (number? val)
      (error "number->bignum" "argument must be a number" val))
   (cond ((bignum? val)
          val)
         ((fixnum? val)
          (fixnum->bignum val))
         ((elong? val)
          (elong->bignum val))
         ((llong? val)
          (llong->bignum val))
         ((int8? val)
          (fixnum->bignum (int8->fixnum val)))
         ((int16? val)
          (fixnum->bignum (int16->fixnum val)))
         ((int32? val)
          (elong->bignum (int32->elong val)))
         ((int64? val)
          (int64->bignum val))
         ((uint8? val)
          (fixnum->bignum (uint8->fixnum val)))
         ((uint16? val)
          (fixnum->bignum (uint16->fixnum val)))
         ((uint32? val)
          (elong->bignum (uint32->elong val)))
         ((uint64? val)
          (llong->bignum (uint64->llong val)))
         ((flonum? val)
          (flonum->bignum val))
         (else
          (error "number->bignum" "unsupported number type" val))))

(define (number->fixnum::bint val)
   (unless (number? val)
      (error "number->fixnum" "argument must be a number" val))
   (unless (<= (minvalfx) val (maxvalfx))
      (error "number->fixnum" "value out of fixnum range" val))
   (cond ((bignum? val)
          (bignum->fixnum val))
         ((fixnum? val)
          val)
         ((elong? val)
          (elong->fixnum val))
         ((llong? val)
          (llong->fixnum val))
         ((int8? val)
          (int8->fixnum val))
         ((int16? val)
          (int16->fixnum val))
         ((int32? val)
          (int32->fixnum val))
         ((int64? val)
          (int64->fixnum val))
         ((uint8? val)
          (uint8->fixnum val))
         ((uint16? val)
          (uint16->fixnum val))
         ((uint32? val)
          (uint32->fixnum val))
         ((uint64? val)
          (uint64->fixnum val))
         ((flonum? val)
          (flonum->fixnum val))
         (else
          (error "number->fixnum" "unsupported number type" val))))

(define (number->elong::elong val)
   (unless (number? val)
      (error "number->elong" "argument must be a number" val))
   (unless (<= (minvalelong) val (maxvalelong))
      (error "number->elong" "value out of elong range" val))
   (cond ((bignum? val)
          (bignum->elong val))
         ((fixnum? val)
          (fixnum->elong val))
         ((elong? val)
          val)
         ((llong? val)
          (llong->elong val))
         ((int8? val)
          (fixnum->elong (int8->fixnum val)))
         ((int16? val)
          (fixnum->elong (int16->fixnum val)))
         ((int32? val)
          (int32->elong val))
         ((int64? val)
          (int64->elong val))
         ((uint8? val)
          (fixnum->elong (uint8->fixnum val)))
         ((uint16? val)
          (fixnum->elong (uint16->fixnum val)))
         ((uint32? val)
          (uint32->elong val))
         ((uint64? val)
          (uint64->elong val))
         ((flonum? val)
          (flonum->elong val))
         (else
          (error "number->elong" "unsupported number type" val))))

(define (number->llong::llong val)
   (unless (number? val)
      (error "number->llong" "argument must be a number" val))
   (unless (<= (minvalllong) val (maxvalllong))
      (error "number->llong" "value out of elong range" val))
   (cond ((bignum? val)
          (bignum->llong val))
         ((fixnum? val)
          (fixnum->llong val))
         ((elong? val)
          (elong->llong val))
         ((llong? val)
          val)
         ((int8? val)
          (fixnum->llong (int8->fixnum val)))
         ((int16? val)
          (fixnum->llong (int16->fixnum val)))
         ((int32? val)
          (int32->llong val))
         ((int64? val)
          (int64->llong val))
         ((uint8? val)
          (fixnum->llong (uint8->fixnum val)))
         ((uint16? val)
          (fixnum->llong (uint16->fixnum val)))
         ((uint32? val)
          (uint32->llong val))
         ((uint64? val)
          (uint64->llong val))
         ((flonum? val)
          (flonum->llong val))
         (else
          (error "number->bignum" "unsupported number type" val))))


(define (number->flonum::real val)
   (unless (number? val)
      (error "number->flonum" "argument must be a number" val))
    (cond ((bignum? val)
          (bignum->flonum val))
         ((fixnum? val)
          (fixnum->flonum val))
         ((elong? val)
          (elong->flonum val))
         ((llong? val)
          (llong->flonum val))
         ((int8? val)
          (fixnum->flonum (int8->fixnum val)))
         ((int16? val)
          (fixnum->flonum (int16->fixnum val)))
         ((int32? val)
          (int32->flonum val))
         ((int64? val)
          (int64->flonum val))
         ((uint8? val)
          (fixnum->flonum (uint8->fixnum val)))
         ((uint16? val)
          (fixnum->flonum (uint16->fixnum val)))
         ((uint32? val)
          (uint32->flonum val))
         ((uint64? val)
          (uint64->flonum val))
         ((flonum? val)
          val)
         (else
          (error "number->bignum" "unsupported number type" val))))

(define (number->int8::int8 val)
   (unless (number? val)
      (error "number->int8" "argument must be a number" val))
   (unless (<= -128 val 127)
      (error "number->int8" "value out of int8 range" val))
    (cond ((bignum? val)
           (fixnum->int8 (bignum->fixnum val)))
         ((fixnum? val)
          (fixnum->int8 val))
         ((elong? val)
          (fixnum->int8 (elong->fixnum val)))
         ((llong? val)
          (fixnum->int8 (llong->fixnum val)))
         ((int8? val)
          val)
         ((int16? val)
          (fixnum->int8 (int16->fixnum val)))
         ((int32? val)
          (fixnum->int8 (int32->fixnum val)))
         ((int64? val)
          (fixnum->int8 (int64->fixnum val)))
         ((uint8? val)
          (fixnum->int8 (uint8->fixnum val)))
         ((uint16? val)
          (fixnum->int8 (uint16->fixnum val)))
         ((uint32? val)
          (fixnum->int8 (uint32->fixnum val)))
         ((uint64? val)
          (fixnum->int8 (uint64->fixnum val)))
         ((flonum? val)
          (fixnum->int8 (flonum->fixnum val)))
         (else
          (error "number->int8" "unsupported number type" val))))

(define (number->uint8::uint8 val)
   (unless (number? val)
      (error "number->uint8" "argument must be a number" val))
   (unless (<= 0 val 255)
      (error "number->uint8" "value out of uint8 range" val))
    (cond ((bignum? val)
           (fixnum->uint8 (bignum->fixnum val)))
         ((fixnum? val)
          (fixnum->uint8 val))
         ((elong? val)
          (fixnum->uint8 (elong->fixnum val)))
         ((llong? val)
          (fixnum->uint8 (llong->fixnum val)))
         ((int8? val)
          (fixnum->uint8 (int8->fixnum val)))
         ((int16? val)
          (fixnum->uint8 (int16->fixnum val)))
         ((int32? val)
          (fixnum->uint8 (int32->fixnum val)))
         ((int64? val)
          (fixnum->uint8 (int64->fixnum val)))
         ((uint8? val)
          val)
         ((uint16? val)
          (fixnum->uint8 (uint16->fixnum val)))
         ((uint32? val)
          (fixnum->uint8 (uint32->fixnum val)))
         ((uint64? val)
          (fixnum->uint8 (uint64->fixnum val)))
         ((flonum? val)
          (fixnum->uint8 (flonum->fixnum val)))
         (else
          (error "number->bignum" "unsupported number type" val))))

(define (number->int16::int16 val)
   (unless (number? val)
      (error "number->int16" "argument must be a number" val))
   (unless (<= -32768 val 32767)
      (error "number->int16" "value out of int16 range" val))
    (cond ((bignum? val)
           (fixnum->int16 (bignum->fixnum val)))
         ((fixnum? val)
          (fixnum->int16 val))
         ((elong? val)
          (fixnum->int16 (elong->fixnum val)))
         ((llong? val)
          (fixnum->int16 (llong->fixnum val)))
         ((int8? val)
          (fixnum->uint16 (int8->fixnum val)))
         ((int16? val)
          val)
         ((int32? val)
          (fixnum->int16 (int32->fixnum val)))
         ((int64? val)
          (fixnum->int16 (int64->fixnum val)))
         ((uint8? val)
          (fixnum->int16 (uint8->fixnum val)))
         ((uint16? val)
          (fixnum->int16 (uint16->fixnum val)))
         ((uint32? val)
          (fixnum->int16 (uint32->fixnum val)))
         ((uint64? val)
          (fixnum->int16 (uint64->fixnum val)))
         ((flonum? val)
          (fixnum->int16 (flonum->fixnum val)))
         (else
          (error "number->int16" "unsupported number type" val))))

(define (number->uint16::uint16 val)
   (unless (number? val)
      (error "number->uint16" "argument must be a number" val))
   (unless (<= 0 val 65535)
      (error "number->uint16" "value out of uint16 range" val))
    (cond ((bignum? val)
           (fixnum->uint16 (bignum->fixnum val)))
         ((fixnum? val)
          (fixnum->uint16 val))
         ((elong? val)
          (fixnum->uint16 (elong->fixnum val)))
         ((llong? val)
          (fixnum->uint16 (llong->fixnum val)))
         ((int8? val)
          (fixnum->uint16 (int8->fixnum val)))
         ((int16? val)
          (fixnum->uint16 (int16->fixnum val)))
         ((int32? val)
          (fixnum->uint16 (int32->fixnum val)))
         ((int64? val)
          (fixnum->uint16 (int64->fixnum val)))
         ((uint8? val)
          (fixnum->uint16 (uint8->fixnum val)))
         ((uint16? val)
          val)
         ((uint32? val)
          (fixnum->uint16 (uint32->fixnum val)))
         ((uint64? val)
          (fixnum->uint16 (uint64->fixnum val)))
         ((flonum? val)
          (fixnum->uint16 (flonum->fixnum val)))
         (else
          (error "number->uint16" "unsupported number type" val))))

(define (number->int32::int32 val)
   (unless (number? val)
      (error "number->int32" "argument must be a number" val))
   (unless (<= #e-2147483648 val #e2147483647)
      (error "number->int32" "value out of int32 range" val))
   (cond ((bignum? val)
          (elong->int32 (bignum->elong val)))
         ((fixnum? val)
          (fixnum->int32 val))
         ((elong? val)
          (elong->int32 val))
         ((llong? val)
          (elong->int32 (llong->elong val)))
         ((int8? val)
          (fixnum->int32 (int8->fixnum val)))
         ((int16? val)
          (fixnum->int32 (int16->fixnum val)))
         ((int32? val)
          val)
         ((int64? val)
          (elong->int32 (int64->elong val)))
         ((uint8? val)
          (fixnum->int32 (uint8->fixnum val)))
         ((uint16? val)
          (fixnum->int32 (uint16->fixnum val)))
         ((uint32? val)
          (elong->int32 (uint32->elong val)))
         ((uint64? val)
          (elong->int32 (uint64->elong val)))
         ((flonum? val)
          (flonum->int32 val))
         (else
          (error "number->int32" "unsupported number type" val))))

(define (number->uint32::uint32 val)
   (unless (number? val)
      (error "number->uint32" "argument must be a number" val))
   (unless (<= 0 val #l4294967295)
      (error "number->uint32" "value out of uint32 range" val))
    (cond ((bignum? val)
           (llong->uint32 (bignum->llong val)))
          ((fixnum? val)
           (fixnum->uint32 val))
          ((elong? val)
           (elong->uint32 val))
          ((llong? val)
           (llong->uint32 val))
          ((int8? val)
           (fixnum->uint32 (int8->fixnum val)))
          ((int16? val)
           (fixnum->uint32 (int16->fixnum val)))
          ((int32? val)
           (elong->uint32 (int32->elong val)))
          ((int64? val)
           (llong->uint32 (int64->llong val)))
          ((uint8? val)
           (fixnum->uint32 (uint8->fixnum val)))
          ((uint16? val)
           (fixnum->uint32 (uint16->fixnum val)))
          ((uint32? val)
           val)
          ((uint64? val)
           (llong->uint32 (uint64->llong val)))
          ((flonum? val)
           (flonum->uint32 val))
          (else
          (error "number->uint32" "unsupported number type" val))))


(define (number->int64::int64 val)
   (unless (number? val)
      (error "number->int64" "argument must be a number" val))
   (unless (<= #z-9223372036854775808 val #z9223372036854775807)
      (error "number->int64" "value out of int64 range" val))
   (cond ((bignum? val)
          (llong->int64 (bignum->llong val)))
         ((fixnum? val)
          (fixnum->int64 val))
         ((elong? val)
          (llong->int64 (elong->llong val)))
         ((llong? val)
          (llong->int64 val))
         ((int8? val)
          (fixnum->int64 (int8->fixnum val)))
         ((int16? val)
          (fixnum->int64 (int16->fixnum val)))
         ((int32? val)
          (llong->int64 (int32->llong val)))
         ((int64? val)
          val)
         ((uint8? val)
          (fixnum->int64 (uint8->fixnum val)))
         ((uint16? val)
          (fixnum->int64 (uint16->fixnum val)))
         ((uint32? val)
          (llong->int64 (uint32->llong val)))
         ((uint64? val)
          (llong->int64 (uint64->llong val)))
         ((flonum? val)
          (flonum->int64 val))
         (else
          (error "number->int64" "unsupported number type" val))))

(define (number->uint64::uint64 val)
   (unless (number? val)
      (error "number->uint64" "argument must be a number" val))
   (unless (<= 0 val #z18446744073709551615)
      (error "number->uint64" "value out of uint64 range" val))
    (cond ((bignum? val)
           (bignum->uint64 val))
          ((fixnum? val)
           (fixnum->uint64 val))
          ((elong? val)
           (llong->uint64 (elong->llong val)))
          ((llong? val)
           (llong->uint64 val))
          ((int8? val)
           (fixnum->uint64 (int8->fixnum val)))
          ((int16? val)
           (fixnum->uint64 (int16->fixnum val)))
          ((int32? val)
           (llong->uint64 (int32->llong val)))
          ((int64? val)
           (llong->uint64 (int64->llong val)))
          ((uint8? val)
           (fixnum->uint64 (uint8->fixnum val)))
          ((uint16? val)
           (fixnum->uint64 (uint16->fixnum val)))
          ((uint32? val)
           (llong->uint64 (uint32->llong val)))
          ((uint64? val)
           val)
          ((flonum? val)
           (flonum->uint64 val))
          (else
          (error "number->uint64" "unsupported number type" val))))
